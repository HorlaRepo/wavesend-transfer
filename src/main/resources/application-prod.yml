server:
  port: 8080
  error:
    include-message: never  # Changed for security in production
  servlet:
    context-path: /api/v1/

cors:
  allowed-origins: ${ALLOWED_ORIGINS:https://app.wavesend.cc}
  allowed-methods: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
  allowed-headers: "Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers"
  exposed-headers: "Authorization"

spring:
  application:
    name: wavesend
  # cloud:
  #   azure:
  #     keyvault:
  #       secret:
  #         enabled: true
  #     credential:
  #       managed-identity-enabled: false
  #       client-id: ${AZURE_CLIENT_ID}
  #       client-secret: ${AZURE_CLIENT_SECRET}
  #     profile:
  #       tenant-id: ${AZURE_TENANT_ID}

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  flyway:
    enabled: true
    baseline-on-migrate: true
    repair-on-migrate: false 

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    properties:
      sasl.mechanism: OAUTHBEARER
      sasl.jaas.config: >-
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;
      sasl.login.callback.handler.class: com.google.cloud.hosted.kafka.auth.GcpLoginCallbackHandler
      security.protocol: SASL_SSL
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      group-id: notification_group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: 'com.shizzy.moneytransfer.dto'
        spring.json.type.mapping: transactionNotification:com.shizzy.moneytransfer.dto.TransactionNotification

    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: transactionNotification:com.shizzy.moneytransfer.dto.TransactionNotification

  jackson:
    serialization:
      write-dates-as-timestamps: false
    date-format: "yyyy-MM-dd HH:mm:ss"
    default-property-inclusion: NON_NULL
    modules:
      - com.fasterxml.jackson.datatype.jsr310.JavaTimeModule

  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        connectiontimeout: 5000
        timeout: 3000
        writetimeout: 5000
        smtp:
          starttls:
            enable: true
          trust: "${MAIL_HOST}"  # More restrictive in production
          socketFactory:
            port: 587
            class: javax.net.ssl.SSLSocketFactory
      auth: true
    protocol: smtp

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        # Performance optimizations
        jdbc:
          batch_size: 50
          batch_versioned_data: true
          order_inserts: true
          order_updates: true
        # Connection handling
        connection:
          provider_disables_autocommit: true
        # Query optimizations
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
        # Remove redundant SQL formatting in production
        format_sql: false
        # Keep current ID generation settings
        id:
          new_generator_mappings: true
          optimizer.default_increment_size: 1
          sequence.increment_size_mismatch_strategy: fix
        dialect: org.hibernate.dialect.PostgreSQLDialect
        # Statement caching
        generate_statistics: false
    show-sql: false
    open-in-view: false

  main:
    web-application-type: servlet
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  codec:
    max-in-memory-size: 10MB

  cache:
    type: redis
    redis:
      cache-null-values: true
      time-to-live: 6000

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      url: ${REDIS_URL}
      ssl:
        enabled: true
      timeout: 600  # Added for production
      enabled: true

cache:
  config:
    entryTtl: 300  # Longer TTL in production
    transactions:
      entryTtl: 300
    wallets:
      entryTtl: 300
    otp:
      entryTtl: 60

application:
  mailing:
    frontend:
      activation-url: ${FRONTEND_URL}/activate-account
      password-reset-url: ${FRONTEND_URL}/reset-password

stripe:
  api-key: ${STRIPE_API_KEY}
  webhook:
    secret: ${STRIPE_WEBHOOK_SECRET}
  success-url: ${FRONTEND_URL}/account/deposit-success
  cancel-url: ${FRONTEND_URL}/account/deposit-failed

springdoc:
  default-produces-media-type: application/json
  server-url: ${SPRINGDOC_SERVER_URL}
  api-docs:
    enabled: ${SPRINGDOC_API_DOCS_ENABLED:false} 
  swagger-ui:
    enabled: ${SPRINGDOC_SWAGGER_UI_ENABLED:false}

logging:
  level:
    root: WARN
    com.shizzy.moneytransfer: INFO
    org.springframework: WARN
    org.hibernate: WARN
    org.springframework.web.cors: DEBUG
    com.azure.security.keyvault: DEBUG
    com.azure.identity: DEBUG

flutterwave:
  api:
    key: ${FLUTTERWAVE_API_KEY}
    live-key: ${FLUTTERWAVE_LIVE_KEY}
    base-url: https://api.flutterwave.com/v3
    secret-hash: ${FLUTTERWAVE_SECRET_HASH}

paystack:
  api:
    key: ${PAYSTACK_API_KEY}
    base-url: https://api.paystack.co

twilio:
  account:
    sid: ${TWILIO_ACCOUNT_SID}
  auth:
    token: ${TWILIO_AUTH_TOKEN}
  phone: ${TWILIO_PHONE}

termii:
  api:
    base-url: https://v3.api.termii.com
    api-key: ${TERMII_API_KEY}

keycloak:
  event-listener:
    endpoint-secret: ${KEYCLOAK_ENDPOINT_SECRET}
    endpoint-url: ${KEYCLOAK_ENDPOINT_URL}

  client:
    id: ${KEYCLOAK_CLIENT_ID}
    secret: ${KEYCLOAK_CLIENT_SECRET}
    realm: ${KEYCLOAK_REALM}
  server-url: ${KEYCLOAK_SERVER_URL}

mailer-send:
  api-token: ${MAILER_SEND_API_TOKEN}

aws:
  region: ${AWS_REGION}
  s3:
    buckets:
      wavesend: ${AWS_S3_BUCKET_NAME}
    url-expiration: 3600
  access-key-id: ${AWS_ACCESS_KEY_ID}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY}

openrouter:
  api-key: ${OPENROUTER_API_KEY}
  api-url: https://openrouter.ai/api/v1/chat/completions
  model: meta-llama/llama-4-maverick:free
  max-tokens: 1000
  temperature: 0.7

app:
  beneficiary:
    low-balance-threshold: 1400.00
    user-min-balance: 4000.00

brevo:
  api-key: ${BREVO_API_KEY}
  deposit-template-id: 1
  withdrawal-template-id: 2

gemini:
  api-key: ${GEMINI_API_KEY}
  model: gemini-2.0-flash